labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_void() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Increase size of x-axis labels
axis.title.x = element_text(size = 10),  # Increase size of x-axis title
axis.title.y = element_text(size = 10),  # Increase size of y-axis title
legend.title = element_text(size = 10),  # Increase size of legend title
legend.text = element_text(size = 10))   # Increase size of legend text
# Bar plot
ggplot(tss_long, aes(x = Sample, y = Count, fill = Peak_Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_void() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels and add stage labels
# Reading the file
tss_data <- read.table("1b-ii.tss_stats.out2", sep = "\t", header = FALSE)
head(tss_data)
# Rename relevant columns
colnames(tss_data)[c(2, 3, 5, 8)] <- c("Sample", "Stage", "Near_TSS", "Distal_TSS")
# Keep only those useful columns
tss_data_clean <- tss_data[, c("Sample", "Stage", "Near_TSS", "Distal_TSS")]
# Reshape the data
tss_long <- pivot_longer(
tss_data_clean,
cols = c(Near_TSS, Distal_TSS),
names_to = "Peak_Type",
values_to = "Count"
)
# Bar plot with *slightly* increased label sizes
ggplot(tss_long, aes(x = Sample, y = Count, fill = Peak_Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_void() +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 11),  # Slightly bigger x labels
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
plot.title = element_text(size = 13, face = "bold", hjust = 0.5)
)
# Bar plot with *slightly* increased label sizes
ggplot(tss_long, aes(x = Sample, y = Count, fill = Peak_Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_void() +
theme_minimal() +
theme(
axis.text.x = element_text(size = 11),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 11),
plot.title = element_text(size = 13, face = "bold", hjust = 0.5)
)
# Bar plot with *slightly* increased label sizes
ggplot(tss_long, aes(x = Sample, y = Count, fill = Peak_Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_void() +
theme_minimal() +
theme(
axis.text.x = element_text(size = 13),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
)
# Loading necessary libraries
library(tidyr)
library(ggplot2)
library(viridis)
library(dplyr)
########################### Pie chart 1 ############################
# Read the file
peak_data <- read.table("Peak_Annotation/1b-i.peakannot.counts2", header = FALSE, sep = "", stringsAsFactors = FALSE)
colnames(peak_data) <- c("species", "feature", "count")
head(peak_data)
# Calculate the total number of peaks to use for percentages
total_peaks <- sum(peak_data$count)
# Group by feature and calculate the sum of counts for each feature type
feature_counts <- peak_data %>%
group_by(feature) %>%
summarise(total_count = sum(count)) %>%
mutate(percentage = total_count / total_peaks * 100)
# Pie chart using ggplot
ggplot(feature_counts, aes(x = "", y = percentage, fill = feature)) +
geom_bar(stat = "identity", width = 1, color = "white", size = 1) +
coord_polar(theta = "y") +
theme_void() +
theme( #Add legend title
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
) +
scale_fill_viridis( #Add percent to legend labels
discrete = TRUE,
name = "Genomic Feature",
labels = paste0(feature_counts$feature, " (", round(feature_counts$percentage, 3), "%)")
) +
labs(title = "Distribution of Narrow Open-Chromatin Peaks")
########################### Bar Plot ##############################
# Reading the file
tss_data <- read.table("1b-ii.tss_stats.out2", sep = "\t", header = FALSE)
head(tss_data)
# Rename relevant columns
colnames(tss_data)[c(2, 3, 5, 8)] <- c("Sample", "Stage", "Near_TSS", "Distal_TSS")
# Keep only those useful columns
tss_data_clean <- tss_data[, c("Sample", "Stage", "Near_TSS", "Distal_TSS")]
# Reshape the data
tss_long <- pivot_longer(
tss_data_clean,
cols = c(Near_TSS, Distal_TSS),
names_to = "Peak_Type",
values_to = "Count"
)
# Bar plot
ggplot(tss_long, aes(x = Sample, y = Count, fill = Peak_Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_void() +
theme_minimal() +
theme(
axis.text.x = element_text(size = 13),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
)
# Loading necessary libraries
library(tidyr)
library(ggplot2)
library(viridis)
library(dplyr)
########################### Pie chart 1 ############################
# Read the file
peak_data <- read.table("Peak_Annotation/1b-i.peakannot.counts2", header = FALSE, sep = "", stringsAsFactors = FALSE)
# Setting the working directory
setwd("~/UoL_Bioinformatics/Research Project/Analysis")
Loading necessary libraries
# Loading necessary libraries
library(tidyr)
library(ggplot2)
library(viridis)
library(dplyr)
########################### Pie chart 1 ############################
# Read the file
peak_data <- read.table("Peak_Annotation/1b-i.peakannot.counts2", header = FALSE, sep = "", stringsAsFactors = FALSE)
# Setting the working directory
setwd("~/UoL_Bioinformatics/Research Project/Analysis")
# Loading necessary libraries
library(tidyr)
library(ggplot2)
library(viridis)
library(dplyr)
########################### Pie chart 1 ############################
# Read the file
peak_data <- read.table("1b-i.peakannot.counts2", header = FALSE, sep = "", stringsAsFactors = FALSE)
colnames(peak_data) <- c("species", "feature", "count")
head(peak_data)
# Calculate the total number of peaks to use for percentages
total_peaks <- sum(peak_data$count)
# Group by feature and calculate the sum of counts for each feature type
feature_counts <- peak_data %>%
group_by(feature) %>%
summarise(total_count = sum(count)) %>%
mutate(percentage = total_count / total_peaks * 100)
# Create a pie chart using ggplot
ggplot(feature_counts, aes(x = "", y = percentage, fill = feature)) +
geom_bar(stat = "identity", width = 1, color = "white", size = 1) +
coord_polar(theta = "y") +
theme_void() +
theme(
legend.title = element_blank(),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
) +
scale_fill_viridis(discrete = TRUE) +  # Using viridis colors
labs(title = "Distribution of Narrow Open-Chromatin Peaks")
########################### Bar Plot ##############################
# Reading the file
tss_data <- read.table("1b-ii.tss_stats.out2", sep = "\t", header = FALSE)
head(tss_data)
# Rename relevant columns
colnames(tss_data)[c(2, 3, 5, 8)] <- c("Sample", "Stage", "Near_TSS", "Distal_TSS")
# Keep only those useful columns
tss_data_clean <- tss_data[, c("Sample", "Stage", "Near_TSS", "Distal_TSS")]
# Reshape the data
tss_long <- pivot_longer(
tss_data_clean,
cols = c(Near_TSS, Distal_TSS),
names_to = "Peak_Type",
values_to = "Count"
)
# Loading necessary libraries
library(tidyr)
library(ggplot2)
library(viridis)
library(dplyr)
########################### Pie chart 1 ############################
# Read the file
peak_data <- read.table("1b-i.peakannot.counts2", header = FALSE, sep = "", stringsAsFactors = FALSE)
colnames(peak_data) <- c("species", "feature", "count")
head(peak_data)
# Calculate the total number of peaks to use for percentages
total_peaks <- sum(peak_data$count)
# Group by feature and calculate the sum of counts for each feature type
feature_counts <- peak_data %>%
group_by(feature) %>%
summarise(total_count = sum(count)) %>%
mutate(percentage = total_count / total_peaks * 100)
# Create a pie chart using ggplot
ggplot(feature_counts, aes(x = "", y = percentage, fill = feature)) +
geom_bar(stat = "identity", width = 1, color = "white", size = 1) +
coord_polar(theta = "y") +
theme_void() +
theme(
legend.title = element_blank(),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
) +
scale_fill_viridis(discrete = TRUE) +  # Using viridis colors
labs(title = "Distribution of Narrow Open-Chromatin Peaks")
########################### Bar Plot ##############################
# Reading the file
tss_data <- read.table("1b-ii.tss_stats.out2", sep = "\t", header = FALSE)
head(tss_data)
# Rename relevant columns
colnames(tss_data)[c(2, 3, 5, 8)] <- c("Sample", "Stage", "Near_TSS", "Distal_TSS")
# Keep only those useful columns
tss_data_clean <- tss_data[, c("Sample", "Stage", "Near_TSS", "Distal_TSS")]
# Reshape the data
tss_long <- pivot_longer(
tss_data_clean,
cols = c(Near_TSS, Distal_TSS),
names_to = "Peak_Type",
values_to = "Count"
)
# Bar plot
ggplot(tss_long, aes(x = Sample, y = Count, fill = Peak_Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_void() +
theme_minimal() +
theme(
axis.title.x = element_text(size = 13),
axis.title.y = element_text(size = 15),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
plot.title = element_text(size = 13, face = "bold", hjust = 0.5)
)
# Read the file
peak_data <- read.table("1b-i.peakannot.counts2", header = FALSE, sep = "", stringsAsFactors = FALSE)
colnames(peak_data) <- c("species", "feature", "count")
head(peak_data)
# Calculate the total number of peaks to use for percentages
total_peaks <- sum(peak_data$count)
# Group by feature and calculate the sum of counts for each feature type
feature_counts <- peak_data %>%
group_by(feature) %>%
summarise(total_count = sum(count)) %>%
mutate(percentage = total_count / total_peaks * 100)
# Pie chart using ggplot
ggplot(feature_counts, aes(x = "", y = percentage, fill = feature)) +
geom_bar(stat = "identity", width = 1, color = "white", size = 1) +
coord_polar(theta = "y") +
theme_void() +
theme(
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
) +
scale_fill_viridis(
discrete = TRUE,
name = "Genomic Feature",
labels = paste0(feature_counts$feature, " (", round(feature_counts$percentage, 3), "%)")
) +
labs(title = "Distribution of Narrow Open-Chromatin Peaks")
# Reading the file
tss_data <- read.table("1b-ii.tss_stats.out2", sep = "\t", header = FALSE)
head(tss_data)
# Rename relevant columns
colnames(tss_data)[c(2, 3, 5, 8)] <- c("Sample", "Stage", "Near_TSS", "Distal_TSS")
# Keep only those useful columns
tss_data_clean <- tss_data[, c("Sample", "Stage", "Near_TSS", "Distal_TSS")]
# Reshape the data
tss_long <- pivot_longer(
tss_data_clean,
cols = c(Near_TSS, Distal_TSS),
names_to = "Peak_Type",
values_to = "Count"
)
# Bar plot
ggplot(tss_long, aes(x = Sample, y = Count, fill = Peak_Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_void() +
theme_minimal() +
theme(
axis.title.x = element_text(size = 13),
axis.title.y = element_text(size = 15),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
plot.title = element_text(size = 13, face = "bold", hjust = 0.5)
)
library(ggplot2)
library(tidyr)
library(dplyr)
library(gridExtra)
# Reading the file
tss_data <- read.table("1b-ii.tss_stats.out2", sep = "\t", header = FALSE)
colnames(tss_data)[c(2, 3, 5, 8)] <- c("Sample", "Stage", "Near_TSS", "Distal_TSS")
tss_data_clean <- tss_data[, c("Sample", "Stage", "Near_TSS", "Distal_TSS")]
# Reshape the data
tss_long <- pivot_longer(
tss_data_clean,
cols = c(Near_TSS, Distal_TSS),
names_to = "Peak_Type",
values_to = "Count"
)
# Bar plot (same as your original, just label size a bit increased)
bar_plot <- ggplot(tss_long, aes(x = Sample, y = Count, fill = Peak_Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 11),
axis.text.y = element_text(size = 11),
plot.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12)
)
# Create a reference table (manually created based on sample names)
dpf_table <- data.frame(
Sample = c("1aAc", "1bAc", "2aAc", "2bAc", "3aAc", "3bAc"),
Stage = c("3dpf", "3dpf", "7dpf", "7dpf", "12dpf", "12dpf")
)
# Create a table grob
table_plot <- tableGrob(dpf_table, rows = NULL)
# Arrange the bar plot and the table side by side
grid.arrange(bar_plot, table_plot, ncol = 2, widths = c(3.5, 1))
install.packages("gridExtra")
install.packages("gridExtra")
library(tidyr)
library(ggplot2)
library(viridis)
library(dplyr)
library(gridExtra)
########################### Pie chart 1 ############################
# Read the file
peak_data <- read.table("1b-i.peakannot.counts2", header = FALSE, sep = "", stringsAsFactors = FALSE)
colnames(peak_data) <- c("species", "feature", "count")
head(peak_data)
# Calculate the total number of peaks to use for percentages
total_peaks <- sum(peak_data$count)
# Group by feature and calculate the sum of counts for each feature type
feature_counts <- peak_data %>%
group_by(feature) %>%
summarise(total_count = sum(count)) %>%
mutate(percentage = total_count / total_peaks * 100)
# Pie chart using ggplot
ggplot(feature_counts, aes(x = "", y = percentage, fill = feature)) +
geom_bar(stat = "identity", width = 1, color = "white", size = 1) +
coord_polar(theta = "y") +
theme_void() +
theme(
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
) +
scale_fill_viridis(
discrete = TRUE,
name = "Genomic Feature",
labels = paste0(feature_counts$feature, " (", round(feature_counts$percentage, 3), "%)")
) +
labs(title = "Distribution of Narrow Open-Chromatin Peaks")
########################### Bar Plot ##############################
# Reading the file
tss_data <- read.table("1b-ii.tss_stats.out2", sep = "\t", header = FALSE)
colnames(tss_data)[c(2, 3, 5, 8)] <- c("Sample", "Stage", "Near_TSS", "Distal_TSS")
tss_data_clean <- tss_data[, c("Sample", "Stage", "Near_TSS", "Distal_TSS")]
# Reshape the data
tss_long <- pivot_longer(
tss_data_clean,
cols = c(Near_TSS, Distal_TSS),
names_to = "Peak_Type",
values_to = "Count"
)
# Bar plot
bar_plot <- ggplot(tss_long, aes(x = Sample, y = Count, fill = Peak_Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "TSS Distribution of Accessible Peaks",
x = "Sample", y = "Number of Peaks", fill = "Peak Type") +
scale_fill_manual(values = c("skyblue", "green")) +
theme_void() +
theme_minimal() +
theme(
axis.title.x = element_text(size = 13),
axis.title.y = element_text(size = 15),
legend.title = element_text(size = 15),
legend.text = element_text(size = 12),
plot.title = element_text(size = 13, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11),
axis.text.y = element_text(size = 11)
)
# Reference table
dpf_table <- data.frame(
Sample = c("1aAc", "1bAc", "2aAc", "2bAc", "3aAc", "3bAc"),
Stage = c("3 dpf", "3 dpf", "7 dpf", "7 dpf", "12 dpf", "12 dpf")
)
# Table grob
table_plot <- tableGrob(dpf_table, rows = NULL)
# Combine plot and table
grid.arrange(bar_plot, table_plot, ncol = 2, widths = c(3.5, 1))
setwd("~/UoL_Bioinformatics/LIFE_703/Analysis/GProfiler")
# Load libraries
library(ggplot2)
# Read the files
data_3dpf <- read.csv("gProfiler_acalliptera_3dpf.csv", header = TRUE)
# Filter for significant terms (adjusted p-value < 0.05) and take top 20
sig_data_3dpf_MF <- data_3dpf[data_3dpf$source == "GO:MF" & data_3dpf$adjusted_p_value < 0.05, ]
sig_data_3dpf_MF <- sig_data_3dpf_MF[order(sig_data_3dpf_MF$adjusted_p_value), ][1:20, ]
sig_data_3dpf_BP <- data_3dpf[data_3dpf$source == "GO:BP" & data_3dpf$adjusted_p_value < 0.05, ]
sig_data_3dpf_BP <- sig_data_3dpf_BP[order(sig_data_3dpf_BP$adjusted_p_value), ][1:20, ]
sig_data_3dpf_CC <- data_3dpf[data_3dpf$source == "GO:CC" & data_3dpf$adjusted_p_value < 0.05, ]
sig_data_3dpf_CC <- sig_data_3dpf_CC[order(sig_data_3dpf_CC$adjusted_p_value), ][1:20, ]
# Use adjusted_p_value directly for color
sig_data_3dpf_MF$neg_log10_adj_p <- sig_data_3dpf_MF$adjusted_p_value
sig_data_3dpf_BP$neg_log10_adj_p <- sig_data_3dpf_BP$adjusted_p_value
sig_data_3dpf_CC$neg_log10_adj_p <- sig_data_3dpf_CC$adjusted_p_value
# Plot of Molecular Function
plot_3dpf_MF <- ggplot(sig_data_3dpf_MF, aes(x = intersection_size, y = reorder(term_name, -intersection_size),
size = intersection_size, color = neg_log10_adj_p)) +
geom_point() +
scale_size(name = "Number of Genes", range = c(2, 10)) +
scale_color_gradient(low = "red", high = "green", name = "FDR") +
theme_minimal() +
theme(
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
plot.title = element_text(size = 12, face = "bold")
) +
labs(
x = "Fold Enrichment",
y = "GO Molecular Function",
title = "GO Molecular Function Enrichment at 3dpf in A. calliptera"
)
# Plot of Biological Processes
plot_3dpf_BP <- ggplot(sig_data_3dpf_BP, aes(x = intersection_size, y = reorder(term_name, -intersection_size),
size = intersection_size, color = neg_log10_adj_p)) +
geom_point() +
scale_size(name = "Number of Genes", range = c(2, 10)) +
scale_color_gradient(low = "red", high = "green", name = "FDR") +
theme_minimal() +
theme(
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
plot.title = element_text(size = 12, face = "bold")
) +
labs(
x = "Fold Enrichment",
y = "GO Biological Processes",
title = "GO Biological Processes at 3dpf in A. calliptera"
)
# Plot of Cellular Components
plot_3dpf_CC <- ggplot(sig_data_3dpf_CC, aes(x = intersection_size, y = reorder(term_name, -intersection_size),
size = intersection_size, color = neg_log10_adj_p)) +
geom_point() +
scale_size(name = "Number of Genes", range = c(2, 10)) +
scale_color_gradient(low = "red", high = "green", name = "FDR") +
theme_minimal() +
theme(
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
plot.title = element_text(size = 12, face = "bold")
) +
labs(
x = "Fold Enrichment",
y = "GO Cellular Component",
title = "GO Cellular Component Enrichment at 3dpf in A. calliptera"
)
# Display plots
show(plot_3dpf_MF)
show(plot_3dpf_BP)
show(plot_3dpf_CC)
View(sig_data_3dpf_BP)
View(plot_3dpf_MF)
View(sig_data_3dpf_MF)
