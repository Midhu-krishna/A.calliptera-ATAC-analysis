seqnames.field = "seqnames",
start.field = "start", end.field = "end",
keep.extra.columns = TRUE)
results_gr_7vs12 <- makeGRangesFromDataFrame(results_7vs12_sig,
seqnames.field = "seqnames",
start.field = "start", end.field = "end",
keep.extra.columns = TRUE)
# ------------------------------------------------------------
# 6. Find overlaps with promoters
# ------------------------------------------------------------
overlaps_3vs7 <- findOverlaps(results_gr_3vs7, promoters)
overlaps_3vs12 <- findOverlaps(results_gr_3vs12, promoters)
overlaps_7vs12 <- findOverlaps(results_gr_7vs12, promoters)
# ------------------------------------------------------------
# 7. Save overlapping promoter peaks and gene IDs
# ------------------------------------------------------------
promoter_peaks_3vs7 <- results_3vs7_sig[queryHits(overlaps_3vs7), ]
promoter_peaks_3vs7$gene_id <- mcols(promoters)$name[subjectHits(overlaps_3vs7)]
promoter_peaks_3vs12 <- results_3vs12_sig[queryHits(overlaps_3vs12), ]
promoter_peaks_3vs12$gene_id <- mcols(promoters)$name[subjectHits(overlaps_3vs12)]
promoter_peaks_7vs12 <- results_7vs12_sig[queryHits(overlaps_7vs12), ]
promoter_peaks_7vs12$gene_id <- mcols(promoters)$name[subjectHits(overlaps_7vs12)]
# Save tables
write.table(promoter_peaks_3vs7, file = "promoter_differential_peaks_3vs7.tsv", sep = "\t", quote = FALSE)
write.table(promoter_peaks_3vs12, file = "promoter_differential_peaks_3vs12.tsv", sep = "\t", quote = FALSE)
write.table(promoter_peaks_7vs12, file = "promoter_differential_peaks_7vs12.tsv", sep = "\t", quote = FALSE)
# Save unique gene lists (combined significant promoter peaks)
write.table(unique(promoter_peaks_3vs7$gene_id), file = "genes_3vs7.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_peaks_3vs12$gene_id), file = "genes_3vs12.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_peaks_7vs12$gene_id), file = "genes_7vs12.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
# ------------------------------------------------------------
# 7b. Split promoter peaks into activated (logFC > 0) and
#     inactivated (logFC < 0) and save lists for GO
# ------------------------------------------------------------
# NOTE about direction: contrasts are dpf3 - dpf7, dpf3 - dpf12, dpf7 - dpf12.
# So logFC > 0 in 'dpf3 - dpf7' means higher at 3 dpf (relative to 7 dpf).
# 3 vs 7
promoter_3vs7_up   <- subset(promoter_peaks_3vs7, logFC > 0)
promoter_3vs7_down <- subset(promoter_peaks_3vs7, logFC < 0)
write.table(promoter_3vs7_up,   file = "promoter_differential_peaks_3vs7_up.tsv",   sep = "\t", quote = FALSE)
write.table(promoter_3vs7_down, file = "promoter_differential_peaks_3vs7_down.tsv", sep = "\t", quote = FALSE)
write.table(unique(promoter_3vs7_up$gene_id),   file = "genes_3vs7_up.txt",   row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_3vs7_down$gene_id), file = "genes_3vs7_down.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
# 3 vs 12
promoter_3vs12_up   <- subset(promoter_peaks_3vs12, logFC > 0)
promoter_3vs12_down <- subset(promoter_peaks_3vs12, logFC < 0)
write.table(promoter_3vs12_up,   file = "promoter_differential_peaks_3vs12_up.tsv",   sep = "\t", quote = FALSE)
write.table(promoter_3vs12_down, file = "promoter_differential_peaks_3vs12_down.tsv", sep = "\t", quote = FALSE)
write.table(unique(promoter_3vs12_up$gene_id),   file = "genes_3vs12_up.txt",   row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_3vs12_down$gene_id), file = "genes_3vs12_down.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
# 7 vs 12
promoter_7vs12_up   <- subset(promoter_peaks_7vs12, logFC > 0)
promoter_7vs12_down <- subset(promoter_peaks_7vs12, logFC < 0)
write.table(promoter_7vs12_up,   file = "promoter_differential_peaks_7vs12_up.tsv",   sep = "\t", quote = FALSE)
write.table(promoter_7vs12_down, file = "promoter_differential_peaks_7vs12_down.tsv", sep = "\t", quote = FALSE)
write.table(unique(promoter_7vs12_up$gene_id),   file = "genes_7vs12_up.txt",   row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_7vs12_down$gene_id), file = "genes_7vs12_down.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
# ------------------------------------------------------------
# 8. Quick summary
# ------------------------------------------------------------
print("Significant peaks (FDR < 0.05):")
print(nrow(results_3vs7_sig))
print(nrow(results_3vs12_sig))
print(nrow(results_7vs12_sig))
print("Promoter-overlapping significant peaks (counts):")
print(paste0("3vs7 total = ", nrow(promoter_peaks_3vs7),
"; up = ", nrow(promoter_3vs7_up), "; down = ", nrow(promoter_3vs7_down)))
print(paste0("3vs12 total = ", nrow(promoter_peaks_3vs12),
"; up = ", nrow(promoter_3vs12_up), "; down = ", nrow(promoter_3vs12_down)))
print(paste0("7vs12 total = ", nrow(promoter_peaks_7vs12),
"; up = ", nrow(promoter_7vs12_up), "; down = ", nrow(promoter_7vs12_down)))
print("Unique overlapping peaks with promoters:")
print(length(unique(queryHits(overlaps_3vs7))))
print(length(unique(queryHits(overlaps_3vs12))))
print(length(unique(queryHits(overlaps_7vs12))))
print("Unique genes in promoter peaks (combined):")
print(length(unique(promoter_peaks_3vs7$gene_id)))
print(length(unique(promoter_peaks_3vs12$gene_id)))
print(length(unique(promoter_peaks_7vs12$gene_id)))
print("Unique genes in promoter peaks (directional):")
print(paste0("3vs7 up genes = ", length(unique(promoter_3vs7_up$gene_id)),
"; 3vs7 down genes = ", length(unique(promoter_3vs7_down$gene_id))))
print(paste0("3vs12 up genes = ", length(unique(promoter_3vs12_up$gene_id)),
"; 3vs12 down genes = ", length(unique(promoter_3vs12_down$gene_id))))
print(paste0("7vs12 up genes = ", length(unique(promoter_7vs12_up$gene_id)),
"; 7vs12 down genes = ", length(unique(promoter_7vs12_down$gene_id))))
# Setting the working directory
setwd("~/UoL_Bioinformatics/Research Project/Analysis/Peak_annotation")
setwd("~/UoL_Bioinformatics/LIFE_703/Analysis/Peak_annotation")
# Loading necessary libraries
library(tidyr)
library(ggplot2)
library(viridis)
library(dplyr)
library(gridExtra)
# Reading the file
tss_data <- read.table("1b-ii.tss_stats.out2", sep = "\t", header = FALSE)
colnames(tss_data)[c(2, 3, 5, 8)] <- c("Sample", "Stage", "Near_TSS", "Distal_TSS")
tss_data_clean <- tss_data[, c("Sample", "Stage", "Near_TSS", "Distal_TSS")]
View(tss_data_clean)
head(tss_data_clean)
# Load required libraries
library(ggplot2)
library(dplyr)
# Read the three files and add a "stage" column
data_3dpf <- read.table("gatnormed_Ac_3dpf_Peak_AllAnnot_allIDR_ChrBgd.tsv", header = TRUE, sep = "\t")
setwd("~/UoL_Bioinformatics/LIFE_703/Analysis/GAT")
# Load required libraries
library(ggplot2)
library(dplyr)
# Read the three files and add a "stage" column
data_3dpf <- read.table("gatnormed_Ac_3dpf_Peak_AllAnnot_allIDR_ChrBgd.tsv", header = TRUE, sep = "\t")
data_3dpf$stage <- "3dpf"
data_7dpf <- read.table("gatnormed_Ac_7dpf_Peak_AllAnnot_allIDR_ChrBgd.tsv", header = TRUE, sep = "\t")
data_7dpf$stage <- "7dpf"
data_12dpf <- read.table("gatnormed_Ac_12dpf_Peak_AllAnnot_allIDR_ChrBgd.tsv", header = TRUE, sep = "\t")
data_12dpf$stage <- "12dpf"
# Keep only significant results (qvalue < 0.05)
sig_data_3dpf <- data_3dpf[data_3dpf$qvalue < 0.05, ]
sig_data_7dpf <- data_7dpf[data_7dpf$qvalue < 0.05, ]
sig_data_12dpf <- data_12dpf[data_12dpf$qvalue < 0.05, ]
# Calculate -log10(qvalue)
sig_data_3dpf$log_qvalue <- -log10(sig_data_3dpf$qvalue)
sig_data_7dpf$log_qvalue <- -log10(sig_data_7dpf$qvalue)
sig_data_12dpf$log_qvalue <- -log10(sig_data_12dpf$qvalue)
# Dotplot
#3dpf
plot_3dpf <- ggplot(sig_data_3dpf, aes(x = fold, y = annotation, size = overlap_nsegments, color = qvalue)) +
geom_point() +  # Draw circles
scale_size(name = "Peak Count", range = c(2, 10)) +  # Size for peak count
scale_color_gradient(low = "blue", high = "red", name = "qvalue", limits = c(0, 0.05)) +  # Linear color scale for qvalue
theme_minimal() +  # Simple theme
theme(
axis.text = element_text(size = 10),  # Text size
axis.title = element_text(size = 12),  # Title size
plot.title = element_text(size = 12, face = "bold")  # Plot title
) +
labs(
x = "Fold Enrichment",  # X-axis label
y = "Genomic Region",  # Y-axis label
title = "Peak Enrichment at 3dpf in A. calliptera"
)
show(plot_3dpf)
#7dpf
plot_7dpf <- ggplot(sig_data_7dpf, aes(x = fold, y = annotation, size = overlap_nsegments, color = qvalue)) +
geom_point() +  # Draw circles
scale_size(name = "Peak Count", range = c(2, 10)) +  # Size for peak count
scale_color_gradient(low = "blue", high = "red", name = "qvalue", limits = c(0, 0.05)) +  # Linear color scale for qvalue
theme_minimal() +  # Simple theme
theme(
axis.text = element_text(size = 10),  # Text size
axis.title = element_text(size = 12),  # Title size
plot.title = element_text(size = 12, face = "bold")  # Plot title
) +
labs(
x = "Fold Enrichment",  # X-axis label
y = "Genomic Region",  # Y-axis label
title = "Peak Enrichment at 7dpf in A. calliptera"
)
show(plot_7dpf)
#12dpf
plot_12dpf <- ggplot(sig_data_12dpf, aes(x = fold, y = annotation, size = overlap_nsegments, color = qvalue)) +
geom_point() +  # Draw circles
scale_size(name = "Peak Count", range = c(2, 10)) +  # Size for peak count
scale_color_gradient(low = "blue", high = "red", name = "qvalue", limits = c(0, 0.05)) +  # Linear color scale for qvalue
theme_minimal() +  # Simple theme
theme(
axis.text = element_text(size = 10),  # Text size
axis.title = element_text(size = 12),  # Title size
plot.title = element_text(size = 12, face = "bold")  # Plot title
) +
labs(
x = "Fold Enrichment",  # X-axis label
y = "Genomic Region",  # Y-axis label
title = "Peak Enrichment at 12dpf in A. calliptera"
)
show(plot_12dpf)
View(plot_12dpf)
View(data_3dpf)
View(sig_data_3dpf)
head(sig_data_3dpf)
head(sig_data_7dpf)
head(sig_data_12dpf)
View(sig_data_3dpf)
View(sig_data_7dpf)
View(sig_data_12dpf)
setwd("~/UoL_Bioinformatics/LIFE_703/Analysis/GProfiler")
# Load libraries
library(ggplot2)
# Read the files
data_3dpf <- read.csv("gProfiler_acalliptera_3dpf.csv", header = TRUE)
# Filter for significant terms (adjusted p-value < 0.05) and take top 20
sig_data_3dpf_MF <- data_3dpf[data_3dpf$source == "GO:MF" & data_3dpf$adjusted_p_value < 0.05, ]
sig_data_3dpf_MF <- sig_data_3dpf_MF[order(sig_data_3dpf_MF$adjusted_p_value), ][1:20, ]
sig_data_3dpf_BP <- data_3dpf[data_3dpf$source == "GO:BP" & data_3dpf$adjusted_p_value < 0.05, ]
sig_data_3dpf_BP <- sig_data_3dpf_BP[order(sig_data_3dpf_BP$adjusted_p_value), ][1:20, ]
sig_data_3dpf_CC <- data_3dpf[data_3dpf$source == "GO:CC" & data_3dpf$adjusted_p_value < 0.05, ]
sig_data_3dpf_CC <- sig_data_3dpf_CC[order(sig_data_3dpf_CC$adjusted_p_value), ][1:20, ]
# Use adjusted_p_value directly for color
sig_data_3dpf_MF$neg_log10_adj_p <- sig_data_3dpf_MF$adjusted_p_value
sig_data_3dpf_BP$neg_log10_adj_p <- sig_data_3dpf_BP$adjusted_p_value
sig_data_3dpf_CC$neg_log10_adj_p <- sig_data_3dpf_CC$adjusted_p_value
# Plot of Molecular Function
plot_3dpf_MF <- ggplot(sig_data_3dpf_MF, aes(x = intersection_size, y = reorder(term_name, -intersection_size),
size = intersection_size, color = neg_log10_adj_p)) +
geom_point() +
scale_size(name = "Number of Genes", range = c(2, 10)) +
scale_color_gradient(low = "red", high = "green", name = "FDR") +
theme_minimal() +
theme(
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
plot.title = element_text(size = 12, face = "bold")
) +
labs(
x = "Fold Enrichment",
y = "GO Molecular Function",
title = "GO Molecular Function Enrichment at 3dpf in A. calliptera"
)
# Plot of Biological Processes
plot_3dpf_BP <- ggplot(sig_data_3dpf_BP, aes(x = intersection_size, y = reorder(term_name, -intersection_size),
size = intersection_size, color = neg_log10_adj_p)) +
geom_point() +
scale_size(name = "Number of Genes", range = c(2, 10)) +
scale_color_gradient(low = "red", high = "green", name = "FDR") +
theme_minimal() +
theme(
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
plot.title = element_text(size = 12, face = "bold")
) +
labs(
x = "Fold Enrichment",
y = "GO Biological Processes",
title = "GO Biological Processes at 3dpf in A. calliptera"
)
# Plot of Cellular Components
plot_3dpf_CC <- ggplot(sig_data_3dpf_CC, aes(x = intersection_size, y = reorder(term_name, -intersection_size),
size = intersection_size, color = neg_log10_adj_p)) +
geom_point() +
scale_size(name = "Number of Genes", range = c(2, 10)) +
scale_color_gradient(low = "red", high = "green", name = "FDR") +
theme_minimal() +
theme(
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
plot.title = element_text(size = 12, face = "bold")
) +
labs(
x = "Fold Enrichment",
y = "GO Cellular Component",
title = "GO Cellular Component Enrichment at 3dpf in A. calliptera"
)
# Display plots
show(plot_3dpf_MF)
show(plot_3dpf_BP)
show(plot_3dpf_CC)
# Load libraries
library(ggplot2)
# Read the files
data_3dpf <- read.csv("gProfiler_acalliptera_3dpf.csv", header = TRUE)
sig_data_3dpf_BP <- data_3dpf[data_3dpf$source == "GO:BP" & data_3dpf$adjusted_p_value < 0.05, ]
sig_data_3dpf_BP <- sig_data_3dpf_BP[order(sig_data_3dpf_BP$adjusted_p_value), ][1:20, ]
View(sig_data_3dpf_BP)
cat(sig_data_3dpf_BP)
head(sig_data_3dpf_BP)
# Read the files
data_7dpf <- read.csv("gProfiler_acalliptera_7dpf.csv", header = TRUE)
sig_data_7dpf_BP <- data_7dpf[data_7dpf$source == "GO:BP" & data_7dpf$adjusted_p_value < 0.05, ]
sig_data_7dpf_BP <- sig_data_7dpf_BP[order(sig_data_7dpf_BP$adjusted_p_value), ][1:20, ]
# Read the files
data_12dpf <- read.csv("gProfiler_acalliptera_12dpf.csv", header = TRUE)
sig_data_12dpf_BP <- data_12dpf[data_12dpf$source == "GO:BP" & data_12dpf$adjusted_p_value < 0.05, ]
sig_data_12dpf_BP <- sig_data_12dpf_BP[order(sig_data_12dpf_BP$adjusted_p_value), ][1:20, ]
# Read the files
data_3dpf <- read.csv("gProfiler_acalliptera_3dpf.csv", header = TRUE)
sig_data_3dpf_BP <- data_3dpf[data_3dpf$source == "GO:BP" & data_3dpf$adjusted_p_value < 0.05, ]
sig_data_3dpf_BP <- sig_data_3dpf_BP[order(sig_data_3dpf_BP$adjusted_p_value), ][1:20, ]
View(sig_data_7dpf_BP)
View(sig_data_12dpf_BP)
View(data_7dpf)
View(data_12dpf)
setwd("~/UoL_Bioinformatics/LIFE_703/Analysis/Differential_peak_analysis")
# Load libraries
library(csaw)
library(edgeR)
library(rtracklayer)
library(SummarizedExperiment)
library(GenomicRanges)
# ------------------------------------------------------------
# 1. Load BAM files
# ------------------------------------------------------------
bam_files <- c(
"Files/1aAc_3dpf_ATAC.nochrM.nodup.filt.shifted.sorted.bam",
"Files/1bAc_3dpf_ATAC.nochrM.nodup.filt.shifted.sorted.bam",
"Files/2aAc_7dpf_ATAC.nochrM.nodup.filt.shifted.sorted.bam",
"Files/2bAc_7dpf_ATAC.nochrM.nodup.filt.shifted.sorted.bam",
"Files/3aAc_12dpf_ATAC.nochrM.nodup.filt.shifted.sorted.bam",
"Files/3bAc_12dpf_ATAC.nochrM.nodup.filt.shifted.sorted.bam"
)
# Parameters for read counting
param <- readParam(max.frag = 1000, pe = "both")
# Count reads in 150 bp windows
data <- windowCounts(bam_files, bin = TRUE, width = 150, param = param)
# Filter out very low-count windows
keep <- filterWindowsGlobal(data)$filter > 1
filtered.data <- data[keep, ]
# Normalize counts
normfacs <- normOffsets(filtered.data)
# Define sample groups
cell_types <- c("dpf3", "dpf3", "dpf7", "dpf7", "dpf12", "dpf12")
# Convert to DGEList with coordinates
dgel <- asDGEList(filtered.data, group = cell_types, genes = as.data.frame(rowRanges(filtered.data)))
colnames(dgel) <- c("3dpf_1a", "3dpf_1b", "7dpf_2a", "7dpf_2b", "12dpf_3a", "12dpf_3b")
# ------------------------------------------------------------
# 2. Differential accessibility analysis
# ------------------------------------------------------------
moma <- model.matrix(~0 + group, data = dgel$samples)
colnames(moma) <- levels(factor(cell_types))
dgel <- estimateDisp(dgel, design = moma)
fit <- glmQLFit(dgel, moma)
# Define contrasts
contr <- makeContrasts(
dpf3 - dpf7,
dpf3 - dpf12,
dpf7 - dpf12,
levels = colnames(moma)
)
# Run tests
res_3vs7 <- glmQLFTest(fit, contrast = contr[,1])
res_3vs12 <- glmQLFTest(fit, contrast = contr[,2])
res_7vs12 <- glmQLFTest(fit, contrast = contr[,3])
# Extract results and sort by FDR
results_3vs7 <- topTags(res_3vs7, n = Inf, sort.by = "none")$table
results_3vs7 <- results_3vs7[order(results_3vs7$FDR), ]
write.table(results_3vs7, file = "differential_peaks_3vs7.tsv", sep = "\t", quote = FALSE)
results_3vs12 <- topTags(res_3vs12, n = Inf, sort.by = "none")$table
results_3vs12 <- results_3vs12[order(results_3vs12$FDR), ]
write.table(results_3vs12, file = "differential_peaks_3vs12.tsv", sep = "\t", quote = FALSE)
results_7vs12 <- topTags(res_7vs12, n = Inf, sort.by = "none")$table
results_7vs12 <- results_7vs12[order(results_7vs12$FDR), ]
write.table(results_7vs12, file = "differential_peaks_7vs12.tsv", sep = "\t", quote = FALSE)
# ------------------------------------------------------------
# 3. Filter for significance
# ------------------------------------------------------------
results_3vs7_sig <- subset(results_3vs7, FDR < 0.05)
results_3vs12_sig <- subset(results_3vs12, FDR < 0.05)
results_7vs12_sig <- subset(results_7vs12, FDR < 0.05)
# ------------------------------------------------------------
# 4. Load fixed promoter BED file
# ------------------------------------------------------------
promoter_bed <- read.table("Files/Astatotilapia_calliptera.fAstCal1.2.101.5kb_promoters.bed",
sep="\t", colClasses=c("character", "integer", "integer",
"character", "character", "character"))
bed_fixed <- data.frame(
chr = promoter_bed[,1],
start = promoter_bed[,2],
end = promoter_bed[,3],
name = promoter_bed[,4],
score = 0,
strand = promoter_bed[,6]
)
write.table(bed_fixed, "Files/Astatotilapia_calliptera.fAstCal1.2.101.5kb_promoters_fixed.bed",
sep="\t", quote=FALSE, row.names=FALSE, col.names=FALSE)
promoters <- import.bed("Files/Astatotilapia_calliptera.fAstCal1.2.101.5kb_promoters_fixed.bed")
# ------------------------------------------------------------
# 5. Convert significant results to GRanges
# ------------------------------------------------------------
results_gr_3vs7 <- makeGRangesFromDataFrame(results_3vs7_sig,
seqnames.field = "seqnames",
start.field = "start", end.field = "end",
keep.extra.columns = TRUE)
results_gr_3vs12 <- makeGRangesFromDataFrame(results_3vs12_sig,
seqnames.field = "seqnames",
start.field = "start", end.field = "end",
keep.extra.columns = TRUE)
results_gr_7vs12 <- makeGRangesFromDataFrame(results_7vs12_sig,
seqnames.field = "seqnames",
start.field = "start", end.field = "end",
keep.extra.columns = TRUE)
# ------------------------------------------------------------
# 6. Find overlaps with promoters
# ------------------------------------------------------------
overlaps_3vs7 <- findOverlaps(results_gr_3vs7, promoters)
overlaps_3vs12 <- findOverlaps(results_gr_3vs12, promoters)
overlaps_7vs12 <- findOverlaps(results_gr_7vs12, promoters)
# ------------------------------------------------------------
# 7. Save overlapping promoter peaks and gene IDs
# ------------------------------------------------------------
promoter_peaks_3vs7 <- results_3vs7_sig[queryHits(overlaps_3vs7), ]
promoter_peaks_3vs7$gene_id <- mcols(promoters)$name[subjectHits(overlaps_3vs7)]
promoter_peaks_3vs12 <- results_3vs12_sig[queryHits(overlaps_3vs12), ]
promoter_peaks_3vs12$gene_id <- mcols(promoters)$name[subjectHits(overlaps_3vs12)]
promoter_peaks_7vs12 <- results_7vs12_sig[queryHits(overlaps_7vs12), ]
promoter_peaks_7vs12$gene_id <- mcols(promoters)$name[subjectHits(overlaps_7vs12)]
# Save tables
write.table(promoter_peaks_3vs7, file = "promoter_differential_peaks_3vs7.tsv", sep = "\t", quote = FALSE)
write.table(promoter_peaks_3vs12, file = "promoter_differential_peaks_3vs12.tsv", sep = "\t", quote = FALSE)
write.table(promoter_peaks_7vs12, file = "promoter_differential_peaks_7vs12.tsv", sep = "\t", quote = FALSE)
# Save unique gene lists (combined significant promoter peaks)
write.table(unique(promoter_peaks_3vs7$gene_id), file = "genes_3vs7.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_peaks_3vs12$gene_id), file = "genes_3vs12.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_peaks_7vs12$gene_id), file = "genes_7vs12.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
# ------------------------------------------------------------
# 7b. Split promoter peaks into activated (logFC > 0) and
#     inactivated (logFC < 0) and save lists for GO
# ------------------------------------------------------------
# NOTE about direction: contrasts are dpf3 - dpf7, dpf3 - dpf12, dpf7 - dpf12.
# So logFC > 0 in 'dpf3 - dpf7' means higher at 3 dpf (relative to 7 dpf).
# 3 vs 7
promoter_3vs7_up   <- subset(promoter_peaks_3vs7, logFC > 0)
promoter_3vs7_down <- subset(promoter_peaks_3vs7, logFC < 0)
write.table(promoter_3vs7_up,   file = "promoter_differential_peaks_3vs7_up.tsv",   sep = "\t", quote = FALSE)
write.table(promoter_3vs7_down, file = "promoter_differential_peaks_3vs7_down.tsv", sep = "\t", quote = FALSE)
write.table(unique(promoter_3vs7_up$gene_id),   file = "genes_3vs7_up.txt",   row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_3vs7_down$gene_id), file = "genes_3vs7_down.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
# 3 vs 12
promoter_3vs12_up   <- subset(promoter_peaks_3vs12, logFC > 0)
promoter_3vs12_down <- subset(promoter_peaks_3vs12, logFC < 0)
write.table(promoter_3vs12_up,   file = "promoter_differential_peaks_3vs12_up.tsv",   sep = "\t", quote = FALSE)
write.table(promoter_3vs12_down, file = "promoter_differential_peaks_3vs12_down.tsv", sep = "\t", quote = FALSE)
write.table(unique(promoter_3vs12_up$gene_id),   file = "genes_3vs12_up.txt",   row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_3vs12_down$gene_id), file = "genes_3vs12_down.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
# 7 vs 12
promoter_7vs12_up   <- subset(promoter_peaks_7vs12, logFC > 0)
promoter_7vs12_down <- subset(promoter_peaks_7vs12, logFC < 0)
write.table(promoter_7vs12_up,   file = "promoter_differential_peaks_7vs12_up.tsv",   sep = "\t", quote = FALSE)
write.table(promoter_7vs12_down, file = "promoter_differential_peaks_7vs12_down.tsv", sep = "\t", quote = FALSE)
write.table(unique(promoter_7vs12_up$gene_id),   file = "genes_7vs12_up.txt",   row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(unique(promoter_7vs12_down$gene_id), file = "genes_7vs12_down.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
# ------------------------------------------------------------
# 8. Quick summary
# ------------------------------------------------------------
print("Significant peaks (FDR < 0.05):")
print(nrow(results_3vs7_sig))
print(nrow(results_3vs12_sig))
print(nrow(results_7vs12_sig))
print("Promoter-overlapping significant peaks (counts):")
print(paste0("3vs7 total = ", nrow(promoter_peaks_3vs7),
"; up = ", nrow(promoter_3vs7_up), "; down = ", nrow(promoter_3vs7_down)))
print(paste0("3vs12 total = ", nrow(promoter_peaks_3vs12),
"; up = ", nrow(promoter_3vs12_up), "; down = ", nrow(promoter_3vs12_down)))
print(paste0("7vs12 total = ", nrow(promoter_peaks_7vs12),
"; up = ", nrow(promoter_7vs12_up), "; down = ", nrow(promoter_7vs12_down)))
print("Unique overlapping peaks with promoters:")
print(length(unique(queryHits(overlaps_3vs7))))
print(length(unique(queryHits(overlaps_3vs12))))
print(length(unique(queryHits(overlaps_7vs12))))
print("Unique genes in promoter peaks (combined):")
print(length(unique(promoter_peaks_3vs7$gene_id)))
print(length(unique(promoter_peaks_3vs12$gene_id)))
print(length(unique(promoter_peaks_7vs12$gene_id)))
print("Unique genes in promoter peaks (directional):")
print(paste0("3vs7 up genes = ", length(unique(promoter_3vs7_up$gene_id)),
"; 3vs7 down genes = ", length(unique(promoter_3vs7_down$gene_id))))
print(paste0("3vs12 up genes = ", length(unique(promoter_3vs12_up$gene_id)),
"; 3vs12 down genes = ", length(unique(promoter_3vs12_down$gene_id))))
print(paste0("7vs12 up genes = ", length(unique(promoter_7vs12_up$gene_id)),
"; 7vs12 down genes = ", length(unique(promoter_7vs12_down$gene_id))))
# ------------------------------------------------------------
# 9. QC: MDS plot (promoter-focused)
# ------------------------------------------------------------
promoter_idx <- unique(c(queryHits(overlaps_3vs7),
queryHits(overlaps_3vs12),
queryHits(overlaps_7vs12)))
dgel_promoter <- dgel[promoter_idx, , keep.lib.sizes=FALSE]
dgel_promoter <- calcNormFactors(dgel_promoter)
png("mds_plot_promoters.png", width = 600, height = 400)
plotMDS(dgel_promoter, labels = colnames(dgel_promoter),
col = c("blue", "blue", "green", "green", "red", "red"))
dev.off()
# Load required package
library(rtracklayer)
# -----------------------------
# Step 1: Import GTF and extract gene_id → gene_name mapping
gtf_file <- "Files/Astatotilapia_calliptera.fAstCal1.2.101.gtf"
gtf <- import(gtf_file)
# Load required package
library(rtracklayer)
# -----------------------------
# Step 1: Import GTF and extract gene_id → gene_name mapping
gtf_file <- "Files/Astatotilapia_calliptera.fAstCal1.2.101.gtf"
gtf <- import(gtf_file)
gene_map <- unique(mcols(gtf)[, c("gene_id", "gene_name")])
gene_map <- as.data.frame(gene_map)
# -----------------------------
# Step 2: Function to map CSV IDs to gene names
# Handles both multi-line and single-line comma-separated files
map_ids_csv <- function(file, gene_map) {
# Read file
lines <- readLines(file)
# Split by comma and remove extra spaces
ids <- trimws(unlist(strsplit(lines, ",")))
# Map to gene names
mapped <- merge(data.frame(gene_id = ids),
gene_map,
by.x = "gene_id", by.y = "gene_id",
all.x = TRUE)
return(mapped)
}
# -----------------------------
# Step 3: Map the three files
mapped_head_dev      <- map_ids_csv("genes_3vs7_down.txt", gene_map)
mapped_eye_morpho    <- map_ids_csv("genes_7vs12_up.txt", gene_map)
mapped_pattern_spec  <- map_ids_csv("genes_7vs12_down.txt", gene_map)
# -----------------------------
# Step 3: Map the three files
genes_3vs7_down      <- map_ids_csv("genes_3vs7_down.txt", gene_map)
genes_7vs12_up       <- map_ids_csv("genes_7vs12_up.txt", gene_map)
genes_7vs12_down     <- map_ids_csv("genes_7vs12_down.txt", gene_map)
View(genes_3vs7_down)
View(genes_7vs12_down)
